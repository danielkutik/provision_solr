<?php
 // $Id$

 /**
  * @file
  *   A 'lucene' implementation of the 'solr' service type.
  */

/**
 * A class containing the 'lucene' implementation of the 'solr' service.
 *
 * This class is conditionally loaded when the "--solr_service_type=lucene"
 * option is passed to provision-save commands run on servers.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class provisionService_solr_lucene extends provisionService_solr {
 /**
  * Some common options handled upstream by the base service classes.
  */

 /**
  *   This service needs to have a port specified for it.
  */
  public $has_port = TRUE;

 /**
  *   The default value for the port input.
  */
  function default_port() {
    return 8080;
  }

 /**
  *   This service needs to be restarted with a shell command.
  */
  public $has_restart_cmd = TRUE;

 /**
  *   The default value for the restart command input.
  */
  function default_restart_cmd() {
    return "sudo /etc/init.d/tomcat6 restart";
  }


  /**
   * Initialize this class, including option handling.
   */
  function init() {
    // REMEMBER TO CALL THE PARENT!
    parent::init();

    /**
     * Register configuration classes for the create_config / delete_config methods.
     */
    $this->configs['server'][] = 'provisionConfig_solr';
  }

  function init_server() {
    parent::init_server();

    $this->server->setProperty('lucene_search_server', 0);
  }

  function save_server() {
    //$this->server->shell_exec($path . ' status');
    //$this->server->lucene_search_server = 1;
  }

  function verify_server_cmd() {
//    provision_file()->copy(dirname(__FILE__) . '/schema.xml', $this->server->include_path . '/schema.xml');
//    $this->sync($this->server->include_path . '/schema.xml');
//    provision_file()->copy(dirname(__FILE__) . '/solrconfig.xml', $this->server->include_path . '/solrconfig.xml');
//    $this->sync($this->server->include_path . '/solrconfig.xml');
    // Call the parent at the end. it will restart the server when it finishes.
    parent::verify_server_cmd();
  }


  function lucene_get_path() {
    $path = '/usr/share/tomcat6/solr';

    return $path;
  }

  function solr_core_exists($solr_core_name) {
    $path = $this->lucene_get_path();

    if (provision_file()->exists($path .'/'. $solr_core_name)->status()) {
      return TRUE;
    }
    
    return FALSE;
  }

  function create_solr_core($solr_core_name) {
    $path = $this->lucene_get_path();

    $this->server->shell_exec('sudo mkdir '. $path .'/'. $solr_core_name);
    $this->server->shell_exec('sudo cp -r /usr/share/tomcat6/solr/conf '. $path .'/'. $solr_core_name);
    $data = array(
      'action' => 'CREATE',
      'name' => $solr_core_name,
      'instanceDir' => $solr_core_name,
      'config' => 'solrconfig.xml',
      'schema' => 'schema.xml',
      'dataDir' => 'data',
    );
    $this->server->shell_exec('sudo chown -R tomcat6:root ' . $path);
    $this->server->shell_exec('curl http://localhost:8080/solr/admin/cores?action=CREATE&name='. $solr_core_name .'&instanceDir='. $solr_core_name .'&config=solrconfig.xml&schema=schema.xml&dataDir=data');
  }

  function purge_solr_core($solr_core_name) {
    $path = lucene_get_path();

    
    $this->server->shell_exec('sudo ' . $path . ' stop');
    $this->server->shell_exec('sudo ' . $path . ' purge ' . $solr_core_name);
//    $this->server->shell_exec('sudo ' . $path . ' start');
  }

  function connect($name) {
    // We can test this by connecting to http://<host>:<port>/solr/<solr_core_name>/admin/
    // for now return TRUE
    return TRUE;
  }

}

