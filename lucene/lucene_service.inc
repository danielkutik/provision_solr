<?php
 // $Id$

 /**
  * @file
  *   A 'lucene' implementation of the 'solr' service type.
  */

/**
 * A class containing the 'lucene' implementation of the 'solr' service.
 *
 * This class is conditionally loaded when the "--solr_service_type=lucene"
 * option is passed to provision-save commands run on servers.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class provisionService_solr_lucene extends provisionService_solr {
  public $has_port = TRUE;
  public $template = 'solr.tpl.php';

  function init() {
    parent::init();

    $this->configs['server'][] = 'provisionConfig_solr';
  }

  function init_server() {
    parent::init_server();

    $reflect = new reflectionClass('provisionService_solr');
    $base_dir_solr = dirname($reflect->getFilename());
    $root_path = dirname($this->server->config_path);
    $this->server->setProperty('lucene_search_server', 0);
    $this->server->solr_conf_path = "{$root_path}/solr";
    $this->server->solr_default_home = "{$base_dir_solr}/lucene/default_data/solr";
    $this->server->solr_default_war = "{$base_dir_solr}/lucene/default_data/solr.war";
    $this->server->solr_tpl = "{$base_dir_solr}/lucene/solr.tpl.php";
  }

  function default_port() {
    return 8080;
  }

  function config_data($config = null, $class = null) {
    $data = parent::config_data($config, $class);
    $data['solr_conf_path'] = $this->server->solr_conf_path;
    $data['solr_default_home'] = $this->server->solr_default_home;
    $data['solr_default_war'] = $this->server->solr_default_war;
  }

 /**
  *   This service needs to be restarted with a shell command.
  */
  public $has_restart_cmd = TRUE;

 /**
  *   The default value for the restart command input.
  */
  function default_restart_cmd() {
    return "sudo /etc/init.d/tomcat6 restart";
  }

  function save_server() {
    //$this->server->shell_exec($path . ' status');
    //$this->server->lucene_search_server = 1;
  }

  function verify_server_cmd() {
    provision_file()->create_dir($this->server->solr_conf_path , dt("Solr folder configuration"), 0770);
    $this->sync($this->server->solr_conf_path, array(
      'exclude' => $this->server->solr_conf_path . '/*',  // Make sure remote directory is created
    ));
  }


  function lucene_get_path() {
    $path = '/usr/share/tomcat6/solr';

    return $path;
  }

  function solr_core_exists($solr_core_name) {
    $path = $this->server->solr_conf_path .'/'. $solr_core_name .'.xml';

    if (provision_file()->exists($path)->status()) {
      return TRUE;
    }
    
    return FALSE;
  }

  function create_solr_core($solr_core_name) {
    //Copy a basic home solr
    $home = $this->server->solr_conf_path .'/'. $solr_core_name .'_home';
    if (!drush_copy_dir($this->server->solr_default_home, $home)) {
      return drush_set_error('DRUSH_CREATE_SOLR', dt('Problems for copy default home solr to !dest.', array('!dest' => $home)));
    }

    //Copy a basic warn file
    $warn = $this->server->solr_conf_path .'/'. $solr_core_name .'.warn';
    if (!drush_op('copy', $this->server->solr_default_war, $warn)) {
      return drush_set_error('DRUSH_CREATE_SOLR', dt('Problems for copy default warn file solr to !dest.', array('!dest' => $warn)));
    }

    $template = file_get_contents($this->server->solr_tpl);
    $xml_config = $this->server->solr_conf_path .'/'. $solr_core_name .'.xml';
    $data = array('warn_file' => $warn, 'home_directory' => $home, 'solr_core_name' => $solr_core_name);
    $status = provision_file()->file_put_contents($xml_config, $this->render_template($template, $data));

    if (!$status) {
      return drush_set_error('DRUSH_CREATE_SOLR', dt('Problem creating !dest.', array('!dest' => $xml_config)));
    }

    //Now change the owner and group
//    provision_file()->chown($home, 'tomcat6', TRUE);
//    provision_file()->chown($warn, 'tomcat6');
//    provision_file()->chown($xml_config, 'tomcat6');
  }

  function purge_solr_core($solr_core_name) {
    return TRUE;
  }

  function connect($name) {
    // We can test this by connecting to http://<host>:<port>/solr/<solr_core_name>/admin/
    // for now return TRUE
    return TRUE;
  }

  function render_template($template, $variables) {
    drush_errors_off();
    extract($variables, EXTR_SKIP);  // Extract the variables to a local namespace
    ob_start();                      // Start output buffering
    eval('?>'. $template);                 // Generate content
    $contents = ob_get_contents();   // Get the contents of the buffer
    ob_end_clean();                  // End buffering and discard
    drush_errors_on();
    return $contents;                // Return the contents
  }
}

