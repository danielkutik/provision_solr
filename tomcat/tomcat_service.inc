<?php

/**
 * @file
 *  Solr service implemented in tomcat.
 */

/**
 * A class containing the 'tomcat' implementation of the 'solr' service.
 *
 * This class is conditionally loaded when the "--solr_service_type=tomcat"
 * option is passed to provision-save commands run on servers.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class Provision_Service_solr_tomcat extends Provision_Service_solr_public {
  protected $application_name = 'tomcat';
  protected $has_restart_cmd = TRUE;

  protected $has_port = TRUE;

  function default_restart_cmd() {
    return Provision_Service_solr_tomcat::tomcat_restart_cmd();
  }
  
  function default_port() {
    return 8080;
  }

  function init_server() {
    $this->configs['server'][] = 'Provision_Config_tomcat_server';
    $this->configs['site'][] = 'Provision_Config_tomcat_site';
    parent::init_server();
  }

  function config_data($config = null, $class = null) {
    $data = parent::config_data($config, $class);
    return $data;
  }
  
  /**
   * Guess at the likely value of the http_restart_cmd.
   *
   * This method is a static so that it can be re-used by the apache_ssl
   * service, even though it does not inherit this class.
   */
  public static function tomcat_restart_cmd() {
    $command = '/etc/init.d/tomcat6'; // A proper default for most of the world
    $options[] = $command;
    foreach ($options as $test) {
      if (is_executable($test)) {
        $command = $test;
        break;
      }
    }
    return "sudo $command restart";
  }

  /**
   * Restart apache to pick up the new config files.
   */ 
  function parse_configs() {
    return $this->restart();
  }
}

/**
 * Apache server level configuration file class
 */
class Provision_Config_tomcat_server extends Provision_Config_solr_server {
  protected $mode = 0755;

  function process() {
    parent::process();
  }
  
  function write() {
    parent::write();
    
    // Ensure chmod of the tomcat folder
    provision_file()->chmod($this->filename(), $this->mode);
  }
}

/** 
 * Apache site level config class. Virtual host.
 */
class Provision_Config_tomcat_site extends Provision_Config_solr_site {
  function process() {
    parent::process();
  }
}

 ///**
 // *   The default value for the restart command input.
 // */
 // function default_restart_cmd() {
 //   return "sudo /etc/init.d/tomcat6 restart";
 // }

//  
//  /**
//   * Verify a Server
//   */
//  function verify_server_cmd() {
//    parent::verify_server_cmd();
//    
//    $app_dir = "{$this->server->config_path}/{$this->application_name}";
//    $tomcat6_conf_path = "{$app_dir}tomcat";
//
//    // create ~/config/SERVER/tomcat
//    provision_file()->create_dir($tomcat6_conf_path , dt("Tomcat folder configuration"), 0775);
//    
//    // symlink ~/config/tomcat to ~/config/SERVER/tomcat
//    $Link_path = $this->server->aegir_root . '/config/' . $file;
//    $this->server->shell_exec("rm $Link_path");
//    $file = 'tomcat';
//    $cmd = sprintf('ln -sf %s %s', 
//      escapeshellarg($this->server->config_path . '/' . $file . '/'), 
//      escapeshellarg($this->server->aegir_root . '/config/' . $file)
//    );
//    if ($this->server->shell_exec($cmd)) {
//      drush_log(dt("Created symlink for %file to %dest on %server", array(
//        '%file' => $this->server->config_path . '/' . $file,
//        '%dest' => $this->server->aegir_root . '/config/' . $file,
//        '%server' => $this->server->remote_host,
//      )));  
//    };
//
//    //Sync data 
//    $this->sync($tomcat6_conf_path);
//  }
//
//  /**
//   * Verify a Site
//   */
//  function verify_site_cmd() {
//    parent::verify_site_cmd();
//    
//    // Create tomcat web app xml file.
//    if ($this->context->solr_server) {
//      
//       // Create tomcat XML file
//      $template = file_get_contents($this->server->solr_tpl);
//      $xml_config = $this->server->tomcat6_conf_path .'/'. $solr_core_name .'.xml';
//      $data = array(
//        'home_directory' => $home,
//        'solr_war_path' => $this->server->solr_war_path
//      );
//      
//      $status = provision_file()->file_put_contents($xml_config, $this->render_template($template, $data));
//      
//      if (!$status) {
//        return drush_set_error('DRUSH_CREATE_SOLR', dt('Problem creating !dest.', array('!dest' => $xml_config)));
//      }
//      
//      //Change permissions
//      //provision_file()->chmod($home, 0777, TRUE);
//      
//      //Sync if is different server_master
//      if ($this->server->solr_server != '@server_master') {
//        _drush_sitealias_load_alias($this->server->solr_server);
//        $all_site_aliases = drush_get_context('site-aliases');
//        $remote_server = $all_site_aliases[$this->server->solr_server];
//      
//       //sync to remote server if is need
//       $this->sync_site_conf($this->server->solr_conf_path, $remote_server['remote_host']);
//       $this->sync_site_conf($this->server->tomcat6_conf_path, $remote_server['remote_host']);
//      }
//    }
//  }
//  
//
//  function lucene_get_path() {
//    $path = '/usr/share/tomcat6/solr';
//
//    return $path;
//  }
//
//  function destroy_site_core($solr_core_name) {
//    //Delete file configuration
//    $home = $this->server->solr_conf_path .'/'. $solr_core_name;;
//    $xml_config = $this->server->solr_conf_path .'/'. $solr_core_name .'.xml';
//
//    provision_file()->rmdir($home);
//    provision_file()->unlink($xml_config);
//  }
//
//
//  function sync_site_conf($path, $remote_host) {
//    $options = array(
//      'relative' => TRUE,
//      'keep-dirlinks' => TRUE,
//      'omit-dir-times' => TRUE,
//    );
//
//    $script_user = provision_current_user();
//    if (drush_core_call_rsync(escapeshellarg($path), escapeshellarg($script_user . '@' . $remote_host . ':/'), $options, TRUE, FALSE)) {
//      drush_log(dt('@path has been synced to remote server @remote_host.', array('@path' => $path, '@remote_host' => $remote_host)));
//    }
//    else {
//      drush_set_error('PROVISION_FILE_SYNC_FAILED', dt('@path could not be synced to remote server @remote_host. Changes might not be available until this has been done. (error: %msg)', array('@path' => $path, '@remote_host' => $remote_host, '%msg' => join("\n", drush_shell_exec_output()))));
//    }
//  }
//
//  function purge_solr_core($solr_core_name) {
//    return TRUE;
//  }
//
//  function connect($name) {
//    // for now return TRUE
//    return TRUE;
//  }
//
//  function render_template($template, $variables) {
//    drush_errors_off();
//    extract($variables, EXTR_SKIP);  // Extract the variables to a local namespace
//    ob_start();                      // Start output buffering
//    eval('>'. $template);                 // Generate content
//    $contents = ob_get_contents();   // Get the contents of the buffer
//    ob_end_clean();                  // End buffering and discard
//    drush_errors_on();
//    return $contents;                // Return the contents
//  }
//}

