<?php
 // $Id$

define ('CATALINA_HOME', '/etc/tomcat6/Catalina/localhost/');

 /**
  * @file
  *   A 'lucene' implementation of the 'solr' service type.
  */

/**
 * A class containing the 'lucene' implementation of the 'solr' service.
 *
 * This class is conditionally loaded when the "--solr_service_type=lucene"
 * option is passed to provision-save commands run on servers.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class provisionService_solr_lucene extends provisionService_solr {
  public $has_port = TRUE;
  public $template = 'solr.tpl.php';

  function init() {
    parent::init();

    $this->configs['server'][] = 'provisionConfig_solr';
  }

  function init_server() {
    parent::init_server();


    $this->server->solr_server = drush_get_option('solr_server', '@server_master');
    $this->server->solr_path = drush_get_option('solr_path', '');
    $reflect = new reflectionClass('provisionService_solr');
    _drush_sitealias_load_alias($this->server->solr_server);
    $all_site_aliases = drush_get_context('site-aliases');
    $app_dir = $all_site_aliases[$this->server->solr_server]['config_path'] .'/';

    $base_dir_solr = dirname($reflect->getFilename());
    $this->server->setProperty('lucene_search_server', 0);
    $this->server->solr_conf_path = "{$app_dir}solr";
    $this->server->tomcat6_conf_path = "{$app_dir}tomcat";
    $this->server->solr_default_home = "{$base_dir_solr}/lucene/default_data/solr";
    $this->server->solr_tpl = "{$base_dir_solr}/lucene/solr.tpl.php";
  }

  function default_port() {
    return 8080;
  }

  function config_data($config = null, $class = null) {
    $data = parent::config_data($config, $class);
    $data['solr_conf_path'] = $this->server->solr_conf_path;
    $data['solr_default_home'] = $this->server->solr_default_home;
    $data['tomcat6_conf_path'] = $this->server->tomcat6_conf_path;
  }

 /**
  *   This service needs to be restarted with a shell command.
  */
  public $has_restart_cmd = TRUE;

 /**
  *   The default value for the restart command input.
  */
  function default_restart_cmd() {
    return "sudo /etc/init.d/tomcat6 restart";
  }

  function verify_server_cmd() {
    $app_dir = "{$this->server->config_path}/{$this->application_name}";
    $solr_conf_path = "{$app_dir}solr";
    $tomcat6_conf_path = "{$app_dir}tomcat";

    provision_file()->create_dir($solr_conf_path , dt("Solr folder configuration"), 0775);
    provision_file()->create_dir($tomcat6_conf_path , dt("Solr folder configuration"), 0775);

    //Sync data 
    $this->sync($solr_conf_path);
    $this->sync($tomcat6_conf_path);
  }


  function lucene_get_path() {
    $path = '/usr/share/tomcat6/solr';

    return $path;
  }

  function solr_core_exists($solr_core_name) {
    $path = $this->server->solr_conf_path .'/'. $solr_core_name .'.xml';

    if (provision_file()->exists($path)->status()) {
      return TRUE;
    }
    
    return FALSE;
  }

  function destroy_site_core($solr_core_name) {
    //Delete file configuration
    $home = $this->server->solr_conf_path .'/'. $solr_core_name;;
    $xml_config = $this->server->solr_conf_path .'/'. $solr_core_name .'.xml';
    $xml_symlink = CATALINA_HOME. $solr_core_name .'.xml';    

    provision_file()->rmdir($home);
    provision_file()->unlink($xml_config);
    provision_file()->unlink($xml_symlink);
  }

  function create_solr_core($solr_core_name) {
    if ($this->solr_core_exists($solr_core_name)) {
      drush_log(dt('The solr instance !name already exists', array('!name' => $solr_core_name)));
      return TRUE;
    }

    //Copy a basic home solr
    $home = $this->server->solr_conf_path .'/'. $solr_core_name;
    if (!provision_file()->exists($home)->status()) {
      if (!drush_copy_dir($this->server->solr_default_home, $home)) {
        return drush_set_error('DRUSH_CREATE_SOLR', dt('Problems for copy default home solr to !dest.', array('!dest' => $home)));
      }
    }

    $template = file_get_contents($this->server->solr_tpl);
    $xml_config = $this->server->tomcat6_conf_path .'/'. $solr_core_name .'.xml';
    $data = array('home_directory' => $home);
    $status = provision_file()->file_put_contents($xml_config, $this->render_template($template, $data));

    if (!$status) {
      return drush_set_error('DRUSH_CREATE_SOLR', dt('Problem creating !dest.', array('!dest' => $xml_config)));
    }

    //Check if we have a path for a specific schema.xml and solrconfig.xml
    if ($this->server->solr_path) {
      if (provision_file()->exists($this->server->solr_path)->status()) {
        $command = "cp -r $this->server->solr_path/* $home/";
        $success = drush_shell_exec($command);
        if (!$success) {
          drush_log(dt('Problem for copy a custom config for solr'));
        }
      }
    }

    //Change permissions
    provision_file()->chmod($home, 0777, TRUE);

    //Sync if is different server_master
    if ($this->server->solr_server != '@server_master') {
      _drush_sitealias_load_alias($this->server->solr_server);
      $all_site_aliases = drush_get_context('site-aliases');
      $remote_server = $all_site_aliases[$this->server->solr_server];

     //sync to remote server if is need
     $this->sync_site_conf($this->server->solr_conf_path, $remote_server['remote_host']);
     $this->sync_site_conf($this->server->tomcat6_conf_path, $remote_server['remote_host']);
    }

    return TRUE;
  }

  function sync_site_conf($path, $remote_host) {
    $options = array(
      'relative' => TRUE,
      'keep-dirlinks' => TRUE,
      'omit-dir-times' => TRUE,
    );

    $script_user = provision_current_user();
    if (drush_core_call_rsync(escapeshellarg($path), escapeshellarg($script_user . '@' . $remote_host . ':/'), $options, TRUE, FALSE)) {
      drush_log(dt('@path has been synced to remote server @remote_host.', array('@path' => $path, '@remote_host' => $remote_host)));
    }
    else {
      drush_set_error('PROVISION_FILE_SYNC_FAILED', dt('@path could not be synced to remote server @remote_host. Changes might not be available until this has been done. (error: %msg)', array('@path' => $path, '@remote_host' => $remote_host, '%msg' => join("\n", drush_shell_exec_output()))));
    }
  }

  function purge_solr_core($solr_core_name) {
    return TRUE;
  }

  function connect($name) {
    // for now return TRUE
    return TRUE;
  }

  function render_template($template, $variables) {
    drush_errors_off();
    extract($variables, EXTR_SKIP);  // Extract the variables to a local namespace
    ob_start();                      // Start output buffering
    eval('?>'. $template);                 // Generate content
    $contents = ob_get_contents();   // Get the contents of the buffer
    ob_end_clean();                  // End buffering and discard
    drush_errors_on();
    return $contents;                // Return the contents
  }
}

